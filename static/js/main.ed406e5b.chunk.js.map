{"version":3,"sources":["functions/gameBoardFactory.js","functions/shipFactory.js","functions/playerFactory.js","components/Warnings.js","components/Header.js","components/Cell.js","contexts.js","components/Gameboard.js","components/ShipPiece.js","components/ShipPalette.js","components/GameArea.js","components/ButtonChoice.js","App.js","index.js"],"names":["Gameboard","size","gameboard","shipsSunk","i","row","j","push","containsShip","isHit","_exists","col","receiveAttack","hitShip","insertShip","ship","isVertical","coordinates","isConfirmed","thisGameboard","clone","isPossible","length","loopThroughShipSquares","cb","thisSquare","hit","isSunk","isDummy","isValid","newGameboard","every","shipIsSunk","Ship","Array","fill","sunk","square","Error","Player","checkFor","_filterOrCheck","item","filteredArray","filter","_isTruthy","hitButNotSunk","square_s","boardsquare","unhit","missed","truthy","allTruthy","squares","getAdjacentSquare","currentGameboard","left","right","up","down","processBoard","predictiveMoves","undefined","backupMoves","randomMoves","entries","cell","squareToRight","squareToLeft","squareAbove","squareBelow","squareList","adjacentSquares","unhitSquares","map","oppositeSquareList","options","squareA","squareB","forEach","getRandom","array","Math","floor","random","findShipPlacements","shipLength","freeAxisSquares","index","a","b","squareBefore","isArray","val","arrayIndex","slice","flat","takeTurn","nextMove","current","placeOwnShip","shipPlacements","insertion","test","WarningContainer","styled","div","NoTouchWarning","LandscapeWarning","Bold","span","Warnings","memo","style","fontSize","HeaderContainer","Header","GameCell","Cell","contents","placeShip","setHoverGameboard","reportDrop","placeLastShip","shipsPlaced","checkIfExists","prop","hasOwnProperty","useDrop","accept","drop","monitor","type","getItemType","confirm","deny","hover","props","backgroundColor","border","ref","onClick","VisibilityContext","createContext","GameboardDiv","gridDisplayWidth","didDrop","setDidDrop","incrementTurn","changeTurn","computerTurn","boardSize","useState","displayedGameboard","setDisplayedGameboard","visible","useContext","Letters","useMemo","LetterArray","String","fromCharCode","resetDisplayedGameboard","useCallback","useEffect","hoverGameboard","isTrueDrop","className","gridTemplateRows","gridTemplateColumns","width","height","letter","ShipPiece","useDrag","collect","isDragging","end","drag","shipHeight","ShipPreview","usePreview","display","Object","assign","Container","ShipContainer","Caption","p","ShipPalette","Turn","GameArea","game","isGameOver","turnCount","setTurnCount","marginTop","DndProvider","backend","TouchBackend","turn","player2","alert","ships","count","TitleContainer","Button","button","ButtonChoice","data","title","isClicked","setIsClicked","option","delay","transition","reportClick","setTimeout","text","key","App","setSize","isSinglePlayer","setisSinglePlayer","setGame","setShipsPlaced","isComputerTurn","setIsComputerTurn","buttonChoiceData","setButtonChoiceData","setVisible","fadingOut","setFadingOut","VisibilityValue","reportEvent","getShips","player2gameboard","pop","newGame","handleAllShipsPlaced","prevGame","board1","board2","handleGameOver","winner","proclamation","findIndex","board","isOver","shipArray","proposeChangeTurn","playerNo","Provider","value","didPlace","shift","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed406e5b.chunk.js","sourcesContent":["import clone from \"just-clone\";\nimport \"babel-polyfill\";\n\nconst Gameboard = (size) => {\n  /*\n    for some reason, following doesn't work with placeShip method:\n\n    let gameboard = new Array(size).fill(new Array(size).fill({...}));\n  */\n  let gameboard = [];\n  let shipsSunk = [];\n\n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      row.push({\n        containsShip: false,\n        isHit: false,\n      });\n    }\n    gameboard.push(row);\n  }\n\n  const _exists = (gameboard, [row, col]) =>\n    gameboard[row] && gameboard[row][col];\n\n  const insertShip = ({ ship, isVertical, coordinates, isConfirmed }) => {\n    const thisGameboard = isConfirmed ? gameboard : clone(gameboard);\n    const [row, col] = coordinates;\n    let isPossible = true;\n    if (\n      (isVertical && row + ship.length > size) ||\n      (!isVertical && col + ship.length > size)\n    ) {\n      isPossible = false;\n    }\n    const loopThroughShipSquares = (gameboard, cb) => {\n      for (let i = 0; i < ship.length; i++) {\n        const thisRow = isVertical ? row + i : row;\n        const thisCol = isVertical ? col : col + i;\n        cb(gameboard, [thisRow, thisCol], i);\n      }\n    };\n\n    const placeShip = (gameboard, [row, col], i) => {\n      gameboard[row][col] = {\n        containsShip: true,\n        isHit: false,\n        hitShip: () => {\n          ship.hit(i);\n        },\n        get shipIsSunk() {\n          return ship.isSunk;\n        },\n      };\n    };\n\n    const testShipValidity = (gameboard, [row, col]) => {\n      const thisSquare = _exists(gameboard, [row, col]);\n      if (!thisSquare || thisSquare.containsShip) {\n        // doesn't exist or already has ship\n        isPossible = false;\n      }\n    };\n\n    const placeShipDummy = (gameboard, [row, col]) => {\n      const validDummyShipPiece = {\n        containsShip: true,\n        isDummy: true,\n        isValid: true,\n      };\n      const invalidDummyShipPiece = {\n        containsShip: true,\n        isDummy: true,\n        isValid: false,\n      };\n      if (_exists(gameboard, [row, col])) {\n        // exists\n        gameboard[row][col] = isPossible\n          ? validDummyShipPiece\n          : invalidDummyShipPiece;\n      }\n    };\n    // validity check\n    loopThroughShipSquares(thisGameboard, testShipValidity);\n\n    if (isConfirmed && isPossible) {\n      // successful real placement\n      loopThroughShipSquares(thisGameboard, placeShip);\n      shipsSunk.push(() => ship.isSunk);\n    } else if (!isConfirmed) {\n      // dummy placement\n      loopThroughShipSquares(thisGameboard, placeShipDummy);\n    }\n    return {\n      newGameboard: thisGameboard,\n      isValid: isPossible,\n    };\n  };\n  const receiveAttack = ([row, col]) => {\n    if (gameboard[row][col].isHit) {\n      return false;\n    }\n    if (gameboard[row][col].containsShip) {\n      gameboard[row][col].hitShip();\n    }\n    gameboard[row][col].isHit = true;\n    return true;\n  };\n\n  return {\n    get current() {\n      return gameboard;\n    },\n    receiveAttack,\n    insertShip,\n    get isOver() {\n      return (\n        !!shipsSunk.length && shipsSunk.every((shipIsSunk) => shipIsSunk())\n      );\n    },\n  };\n};\n\nexport default Gameboard;\n","const Ship = (length) => {\n  let ship = {\n    length,\n    isHit: new Array(length).fill(false),\n    sunk: false,\n  };\n  const isSunk = () => {\n    if (!ship.sunk) {\n      const shipIsSunk = ship.isHit.every((square) => square);\n      if (shipIsSunk) {\n        ship.sunk = true;\n      }\n    }\n    return ship.sunk;\n  };\n  const hit = (i) => {\n    if (i > ship.length - 1) {\n      throw new Error(\"Index longer than ship\");\n    }\n    ship.isHit[i] = true;\n    return isSunk();\n  };\n\n  return {\n    length,\n    hit,\n    get hits() {\n      return ship.isHit;\n    },\n    get isSunk() {\n      return isSunk();\n    },\n  };\n};\n\nexport default Ship;\n","const Player = () => {\n  const checkFor = (() => {\n    const _filterOrCheck = (item, cb) => {\n      if (item.length) {\n        const filteredArray = item.filter(cb);\n        return filteredArray.length && filteredArray;\n      } else if (typeof item === \"object\") {\n        return cb(item);\n      } else {\n        throw new Error(\"Only accepts arrays or objects\");\n      }\n    };\n\n    const hitButNotSunk = (square_s) => {\n      const _isHitButNotSunk = (square) =>\n        square.boardsquare.isHit &&\n        square.boardsquare.containsShip &&\n        !square.boardsquare.shipIsSunk;\n      return _filterOrCheck(square_s, _isHitButNotSunk);\n    };\n    const unhit = (square_s) => {\n      const _isUnhit = (square) => !square.boardsquare.isHit;\n      return _filterOrCheck(square_s, _isUnhit);\n    };\n    const hit = (square_s) => {\n      const _isHit = (square) => square.boardsquare.isHit;\n      return _filterOrCheck(square_s, _isHit);\n    };\n    const missed = (square_s) => {\n      const _isMissed = (square) =>\n        square.boardsquare.isHit && !square.boardsquare.containsShip;\n      return _filterOrCheck(square_s, _isMissed);\n    };\n    const _isTruthy = (square) => square;\n    const truthy = (square_s) => {\n      return _filterOrCheck(square_s, _isTruthy);\n    };\n    const allTruthy = (squares) => squares.every(_isTruthy);\n\n    return {\n      hitButNotSunk,\n      unhit,\n      hit,\n      missed,\n      truthy,\n      allTruthy,\n    };\n  })();\n\n  const getAdjacentSquare = (() => {\n    const _exists = (currentGameboard, [row, col]) => {\n      return currentGameboard[row] && currentGameboard[row][col];\n    };\n\n    const left = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row, col - 1]) && {\n          coordinates: [row, col - 1],\n          boardsquare: currentGameboard[row][col - 1],\n        }\n      );\n    };\n    const right = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row, col + 1]) && {\n          coordinates: [row, col + 1],\n          boardsquare: currentGameboard[row][col + 1],\n        }\n      );\n    };\n    const up = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row - 1, col]) && {\n          coordinates: [row - 1, col],\n          boardsquare: currentGameboard[row - 1][col],\n        }\n      );\n    };\n    const down = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row + 1, col]) && {\n          coordinates: [row + 1, col],\n          boardsquare: currentGameboard[row + 1][col],\n        }\n      );\n    };\n    return {\n      left,\n      right,\n      up,\n      down,\n    };\n  })();\n\n  const processBoard = (gameboard) => {\n    let predictiveMoves = undefined;\n    let backupMoves = undefined;\n    let randomMoves = [];\n    const pushToBackup = (array) => {\n      array.forEach((item) => backupMoves.push(item.coordinates));\n    };\n\n    for (let [i, row] of gameboard.entries()) {\n      for (let [j, cell] of row.entries()) {\n        if (cell.isHit && cell.containsShip && !cell.shipIsSunk) {\n          // HIT\n          // check surrounding squares\n          const squareToRight = getAdjacentSquare.right(gameboard, [i, j]);\n          const squareToLeft = getAdjacentSquare.left(gameboard, [i, j]);\n          const squareAbove = getAdjacentSquare.up(gameboard, [i, j]);\n          const squareBelow = getAdjacentSquare.down(gameboard, [i, j]);\n          const squareList = [\n            squareToRight,\n            squareToLeft,\n            squareAbove,\n            squareBelow,\n          ];\n          const adjacentSquares = checkFor.truthy(squareList);\n          const unhitSquares = checkFor.unhit(adjacentSquares);\n          if (!unhitSquares.length) {\n            // no adjacent squares to try, move on\n            continue;\n          }\n          const shipsInProgress = checkFor.hitButNotSunk(adjacentSquares);\n          if (!shipsInProgress.length) {\n            // all unhit squares worth trying\n            predictiveMoves = unhitSquares.map((square) => square.coordinates);\n            break;\n          }\n          // check for hit square opposite unhit square\n          const oppositeSquareList = [\n            squareToLeft,\n            squareToRight,\n            squareBelow,\n            squareAbove,\n          ];\n          let options = [];\n          for (let i = 0; i < 4; i++) {\n            const squareA = squareList[i];\n            const squareB = oppositeSquareList[i];\n\n            if (\n              checkFor.allTruthy([squareA, squareB]) &&\n              checkFor.unhit(squareA) &&\n              checkFor.hitButNotSunk(squareB)\n            ) {\n              // unhit square worth trying\n              options.push(squareA.coordinates);\n            } else if (\n              squareA &&\n              checkFor.hitButNotSunk(squareA) &&\n              (!squareB || checkFor.hit(squareB))\n            ) {\n              // might extend in a different axis\n              if (!backupMoves) {\n                backupMoves = [];\n              }\n              const unhitSquares = checkFor.unhit(adjacentSquares);\n              unhitSquares && pushToBackup(unhitSquares);\n            }\n          }\n          if (options.length) {\n            predictiveMoves = options;\n            break;\n          }\n        } else if (!cell.isHit) {\n          randomMoves.push([i, j]);\n        }\n      }\n      if (predictiveMoves) {\n        // got some squares to try, bail out\n        break;\n      }\n    }\n    return predictiveMoves || backupMoves || randomMoves;\n  };\n\n  const getRandom = (array) => {\n    if (array.length === 1) {\n      return array[0];\n    }\n    return array[Math.floor(Math.random() * array.length)];\n  };\n\n  const takeTurn = (gameboard) => {\n    const nextMove = getRandom(processBoard(gameboard.current));\n    gameboard.receiveAttack(nextMove);\n  };\n\n  const findShipPlacements = ({ currentGameboard, shipLength, isVertical }) => {\n    let freeAxisSquares = [];\n    currentGameboard.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        const index = isVertical ? j : i;\n        if (cell.containsShip) {\n          return;\n        }\n        const getLastItem = (array) => {\n          return array[array.length - 1];\n        };\n        function arraysAreEqual(a, b) {\n          return (\n            Array.isArray(a) &&\n            Array.isArray(b) &&\n            a.length === b.length &&\n            a.every((val, arrayIndex) => val === b[arrayIndex])\n          );\n        }\n        // available\n        const squareBefore = isVertical ? [i - 1, j] : [i, j - 1];\n        if (\n          freeAxisSquares[index] &&\n          arraysAreEqual(getLastItem(freeAxisSquares[index]), squareBefore)\n        ) {\n          // last coordinates were square above\n          freeAxisSquares[index].push([i, j]);\n        } else {\n          freeAxisSquares[index] = [[i, j]];\n        }\n      });\n    });\n    return (\n      freeAxisSquares\n        // long enough to fit ship\n        .filter((array) => array.length >= shipLength)\n        // get all possible start coordinates\n        .map((array) => array.slice(0, 1 - shipLength))\n        .flat()\n    );\n  };\n\n  const placeOwnShip = (gameboard, ship) => {\n    const isVertical = getRandom([true, false]);\n    const shipPlacements = findShipPlacements({\n      currentGameboard: gameboard.current,\n      shipLength: ship.length,\n      isVertical,\n    });\n    const randomShipPlacement = getRandom(shipPlacements);\n    const insertion = {\n      ship,\n      isVertical,\n      coordinates: randomShipPlacement,\n      isConfirmed: true,\n    };\n    gameboard.insertShip(insertion);\n  };\n  return {\n    takeTurn,\n    placeOwnShip,\n    test: {\n      checkFor,\n      getAdjacentSquare,\n      processBoard,\n      findShipPlacements,\n    },\n  };\n};\n\nexport default Player;\n","import React, { memo } from \"react\";\nimport styled from \"styled-components\";\n\nconst WarningContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  background-color: bisque;\n`;\n\nconst NoTouchWarning = styled(WarningContainer)`\n  z-index: 2;\n  @media (hover: none) {\n    display: none;\n  }\n  @media (pointer: coarse) {\n    display: none;\n  }\n`;\n\nconst LandscapeWarning = styled(WarningContainer)`\n  z-index: 1;\n  @media (orientation: portrait) {\n    display: none;\n  }\n`;\n\nconst Bold = styled.span`\n  font-weight: bold;\n`;\n\nconst Warnings = memo(() => {\n  return (\n    <>\n      <NoTouchWarning>\n        <h1 style={{ fontSize: \"3rem\" }}>Sorry!</h1>\n        <p style={{ fontSize: \"2rem\" }}>\n          {[\n            \"This app has been optimised for \",\n            <Bold>touch devices</Bold>,\n            \".\",\n          ]}\n        </p>\n      </NoTouchWarning>\n      <LandscapeWarning>\n        <p style={{ fontSize: \"2.5rem\" }}>\n          {[\n            \"Please hold your device in \",\n            <Bold>portrait orientation</Bold>,\n            \".\",\n          ]}\n        </p>\n      </LandscapeWarning>\n    </>\n  );\n});\n\nexport default Warnings;\n","import React, { memo } from \"react\";\nimport styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n`;\n\nconst Header = memo(() => {\n  return (\n    <HeaderContainer>\n      <h1>Battleships</h1>\n    </HeaderContainer>\n  );\n});\n\nexport default Header;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDrop } from \"react-dnd\";\n\nconst GameCell = styled.div`\n  height: 100%;\n  width: 100%;\n  border: 1px solid lightgrey;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Cell = ({\n  cell = {},\n  contents,\n  coordinates,\n  placeShip,\n  setHoverGameboard,\n  reportDrop,\n  placeLastShip,\n  takeTurn,\n  shipsPlaced,\n}) => {\n  const checkIfExists = (cell, prop) => {\n    return cell.hasOwnProperty(prop) ? cell[prop] : undefined;\n  };\n  const containsShip = checkIfExists(cell, \"containsShip\"),\n    isDummy = checkIfExists(cell, \"isDummy\"),\n    isValid = checkIfExists(cell, \"isValid\"),\n    isHit = checkIfExists(cell, \"isHit\"),\n    shipIsSunk = checkIfExists(cell, \"shipIsSunk\");\n\n  const [, drop] = useDrop(() => ({\n    accept: [\"SHIP-VERTICAL\", \"SHIP-HORIZONTAL\"],\n    drop: (item, monitor) => {\n      if (!coordinates) {\n        return;\n      }\n      const type = monitor.getItemType();\n      const isVertical = type === \"SHIP-VERTICAL\" ? true : false;\n      let didPlace = placeShip(coordinates, isVertical);\n      if (!didPlace) {\n        reportDrop.deny();\n        return;\n      }\n      reportDrop.confirm(true);\n      placeLastShip && placeLastShip();\n    },\n    hover(props, monitor) {\n      if (contents) {\n        reportDrop.deny();\n        return;\n      }\n      const type = monitor.getItemType();\n      const isVertical = type === \"SHIP-VERTICAL\" ? true : false;\n      setHoverGameboard(coordinates, isVertical);\n      reportDrop.confirm(false);\n    },\n  }));\n  const backgroundColor =\n    (shipsPlaced && isHit === false) || contents\n      ? \"transparent\"\n      : shipIsSunk\n      ? \"lightgrey\"\n      : containsShip && ((isHit && shipsPlaced) || (!isDummy && !shipsPlaced))\n      ? \"red\"\n      : containsShip && isDummy && isValid\n      ? \"lightgreen\"\n      : containsShip && isDummy && isValid === false\n      ? \"orange\"\n      : \"rgb(215, 245, 255)\";\n  const style = contents\n    ? { backgroundColor: backgroundColor, border: \"none\" }\n    : {\n        backgroundColor: backgroundColor,\n      };\n  return (\n    <GameCell\n      ref={drop}\n      style={style}\n      onClick={\n        takeTurn\n          ? () => {\n              takeTurn(coordinates);\n            }\n          : undefined\n      }\n    >\n      {contents}\n    </GameCell>\n  );\n};\n\nexport default Cell;\n","import { createContext } from \"react\";\n\nconst VisibilityContext = createContext(),\n  GameOverContext = createContext();\n\nexport { VisibilityContext, GameOverContext };\n","import React, {\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n  useContext,\n} from \"react\";\nimport styled from \"styled-components\";\n\n// components\nimport Cell from \"./Cell\";\n\n// contexts\nimport { VisibilityContext } from \"../contexts\";\n\nconst GameboardDiv = styled.div`\n  display: grid;\n  margin: 0 auto;\n  grid-gap: 1px;\n`;\n\nconst Gameboard = ({\n  gameboard,\n  gridDisplayWidth,\n  ship,\n  placeShip,\n  shipsPlaced,\n  didDrop,\n  setDidDrop,\n  placeLastShip,\n  incrementTurn,\n  changeTurn,\n  computerTurn,\n}) => {\n  const boardSize = gameboard.current.length;\n  const [displayedGameboard, setDisplayedGameboard] = useState(\n    gameboard.current\n  );\n  const { visible } = useContext(VisibilityContext);\n\n  const Letters = useMemo(() => {\n    let LetterArray = [];\n    for (let i = 0; i < boardSize; i++) {\n      LetterArray.push(String.fromCharCode(65 + i));\n    }\n    return LetterArray;\n  }, [boardSize]);\n\n  const resetDisplayedGameboard = useCallback(() => {\n    setDisplayedGameboard(gameboard.current);\n  }, [gameboard]);\n\n  useEffect(() => {\n    if (!didDrop) {\n      resetDisplayedGameboard();\n    }\n  }, [didDrop, resetDisplayedGameboard]);\n\n  const setHoverGameboard = (coordinates, isVertical) => {\n    const hoverGameboard = gameboard.insertShip({\n      ship,\n      isVertical,\n      coordinates,\n      isConfirmed: false,\n    });\n    setDisplayedGameboard(hoverGameboard.newGameboard);\n  };\n\n  const takeTurn = (coordinates) => {\n    const turn = gameboard.receiveAttack(coordinates);\n    if (!turn) {\n      return;\n    }\n    incrementTurn();\n    changeTurn();\n  };\n\n  // const GameCell = ({ cell, row, col }) => {\n  //   TODO: hover works but drop ship doesn't(??)\n  //   return (\n  //     <Cell\n  //       cell={cell}\n  //       key={`square${row}-${col}`}\n  //       coordinates={[Number(row), Number(col)]}\n  //       placeShip={placeShip}\n  //       placeLastShip={placeLastShip}\n  //       setHoverGameboard={setHoverGameboard}\n  //       resetDisplayedGameboard={resetDisplayedGameboard}\n  //       reportDrop={reportDrop}\n  //       takeTurn={shipsPlaced ? takeTurn : undefined}\n  //     />\n  //   );\n  // };\n\n  const reportDrop = (() => {\n    const confirm = (isTrueDrop) => {\n      setDidDrop(true);\n      if (!isTrueDrop) {\n        return;\n      }\n      incrementTurn();\n    };\n    const deny = () => {\n      setDidDrop(false);\n    };\n    return {\n      confirm,\n      deny,\n    };\n  })();\n\n  return (\n    <GameboardDiv\n      className={visible ? \"fadeIn\" : \"fadeOut\"}\n      style={{\n        gridTemplateRows: `repeat(${boardSize + 1}, 1fr)`,\n        gridTemplateColumns: `repeat(${boardSize + 1}, 1fr)`,\n        width: gridDisplayWidth,\n        height: gridDisplayWidth,\n      }}\n    >\n      <Cell contents={\" \"} reportDrop={reportDrop} />\n      {Letters.map((letter) => (\n        <Cell\n          contents={letter}\n          key={`letter${letter}`}\n          reportDrop={reportDrop}\n        />\n      ))}\n      {displayedGameboard &&\n        displayedGameboard.map((row, i) =>\n          row.map((cell, j) => {\n            if (j === 0 || j % (boardSize + 1) === 0) {\n              return (\n                <>\n                  <Cell\n                    contents={i + 1}\n                    key={`num${i + 1}`}\n                    reportDrop={reportDrop}\n                  />\n                  {/* <GameCell cell={cell} row={i} col={j} /> */}\n                  <Cell\n                    cell={cell}\n                    key={`square${i}-${j}`}\n                    coordinates={[i, j]}\n                    placeShip={placeShip}\n                    placeLastShip={placeLastShip}\n                    setHoverGameboard={setHoverGameboard}\n                    reportDrop={reportDrop}\n                    takeTurn={\n                      shipsPlaced && !computerTurn ? takeTurn : undefined\n                    }\n                    shipsPlaced={shipsPlaced}\n                    changeTurn={changeTurn}\n                  />\n                </>\n              );\n            } else {\n              return (\n                <Cell\n                  cell={cell}\n                  key={`square${i}-${j}`}\n                  coordinates={[i, j]}\n                  placeShip={placeShip}\n                  placeLastShip={placeLastShip}\n                  setHoverGameboard={setHoverGameboard}\n                  reportDrop={reportDrop}\n                  takeTurn={shipsPlaced && !computerTurn ? takeTurn : undefined}\n                  shipsPlaced={shipsPlaced}\n                />\n                // <GameCell cell={cell} row={i} col={j} />\n              );\n            }\n          })\n        )}\n    </GameboardDiv>\n  );\n};\n\nexport default Gameboard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDrag } from \"react-dnd\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst Ship = styled.div`\n  background-color: red;\n  display: block;\n`;\n\nconst ShipPiece = ({\n  ship,\n  isVertical,\n  width,\n  gridDisplayWidth,\n  setDidDrop,\n}) => {\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: isVertical ? \"SHIP-VERTICAL\" : \"SHIP-HORIZONTAL\",\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    end: (item, monitor) => {\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        setDidDrop(false);\n      }\n    },\n  }));\n\n  const shipLength = `calc(${gridDisplayWidth} / ${width + 1} * ${\n    ship.length\n  })`;\n  const shipHeight = `calc(${gridDisplayWidth} / ${width + 1})`;\n\n  const ShipPreview = () => {\n    const { display, style } = usePreview();\n    if (!display) {\n      return null;\n    }\n    return isVertical ? (\n      <Ship\n        style={Object.assign(style, {\n          width: shipHeight,\n          height: shipLength,\n          backgroundColor: isDragging ? \"red\" : \"transparent\",\n        })}\n      />\n    ) : (\n      <Ship\n        style={Object.assign(style, {\n          width: shipLength,\n          height: shipHeight,\n          backgroundColor: isDragging ? \"red\" : \"transparent\",\n        })}\n      />\n    );\n  };\n  return (\n    <>\n      <Ship\n        ref={drag}\n        style={{\n          width: isVertical ? shipHeight : shipLength,\n          height: isVertical ? shipLength : shipHeight,\n          backgroundColor: isDragging ? \"transparent\" : \"red\",\n        }}\n      />{\" \"}\n      <ShipPreview />\n    </>\n  );\n};\n\nexport default ShipPiece;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\n// component\nimport ShipPiece from \"./ShipPiece\";\n\n// contexts\nimport { VisibilityContext } from \"../contexts\";\n\nconst Container = styled.div`\n  width: 90vw;\n  height: min-content;\n  margin: 20px auto;\n`;\n\nconst ShipContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst Caption = styled.p`\n  font-size: 1.5rem;\n`;\n\nconst Bold = styled.span`\n  font-weight: bold;\n`;\n\nconst ShipPalette = ({ ship, width, setDidDrop, gridDisplayWidth }) => {\n  const { visible } = useContext(VisibilityContext);\n  return (\n    <Container className={visible ? \"fadeIn\" : \"fadeOut\"}>\n      <Caption>\n        {[\"Drag \", <Bold>either</Bold>, \" ship on to the board\"]}\n      </Caption>\n      <ShipContainer>\n        {ship && (\n          <>\n            <ShipPiece\n              ship={ship}\n              width={width}\n              gridDisplayWidth={gridDisplayWidth}\n              setDidDrop={setDidDrop}\n              isVertical={false}\n            />\n            <ShipPiece\n              ship={ship}\n              width={width}\n              gridDisplayWidth={gridDisplayWidth}\n              setDidDrop={setDidDrop}\n              isVertical={true}\n            />\n          </>\n        )}\n      </ShipContainer>\n    </Container>\n  );\n};\n\nexport default ShipPalette;\n","import React, { useState, useContext } from \"react\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport styled from \"styled-components\";\n\n// components\nimport Gameboard from \"./Gameboard\";\nimport ShipPalette from \"./ShipPalette\";\n\n// contexts\nimport { VisibilityContext } from \"../contexts\";\n\nconst Turn = styled.p`\n  font-size: 1.2rem;\n  // margin: 1rem auto -5px;\n  font-weight: bold;\n`;\n\nconst gridDisplayWidth = \"82vw\";\n\nconst GameArea = ({\n  game,\n  isGameOver,\n  placeShip,\n  placeLastShip,\n  shipsPlaced,\n  changeTurn,\n  computerTurn,\n}) => {\n  const [didDrop, setDidDrop] = useState(true);\n  const [turnCount, setTurnCount] = useState(0);\n  const incrementTurn = () => {\n    setTurnCount((count) => count + 1);\n  };\n  const { visible } = useContext(VisibilityContext);\n\n  // centralise board after having placed ships\n  const style = shipsPlaced ? { marginTop: \"10vh\" } : undefined;\n  return (\n    <DndProvider backend={TouchBackend}>\n      <Turn className={visible ? \"fadeIn\" : \"fadeOut\"} style={style}>\n        {game.turn === 0 ? \"Player 1\" : game.player2 ? \"Computer\" : \"Player 2\"}\n      </Turn>\n      {isGameOver ? (\n        game.gameboard.map((gameboard, i) => {\n          alert(\"Game over\");\n          return (\n            <Gameboard key={`board${i}`} gameboard={gameboard} length=\"40vw\" />\n          );\n        })\n      ) : (\n        <Gameboard\n          // currently using key updates to force updates... Not cool?\n          key={`${game.turn}${turnCount}`}\n          gridDisplayWidth={gridDisplayWidth}\n          gameboard={game.gameboard[game.turn]}\n          shipsPlaced={shipsPlaced}\n          ship={game.ships[game.turn][0]}\n          placeShip={placeShip}\n          didDrop={didDrop}\n          setDidDrop={setDidDrop}\n          placeLastShip={placeLastShip}\n          incrementTurn={incrementTurn}\n          changeTurn={changeTurn}\n          computerTurn={computerTurn}\n        />\n      )}\n      {shipsPlaced && !computerTurn && (\n        <p className={visible ? \"fadeIn\" : \"fadeOut\"}>Tap to take a turn</p>\n      )}\n      {!shipsPlaced && (\n        <ShipPalette\n          ship={game.ships[game.turn][0]}\n          gridDisplayWidth={gridDisplayWidth}\n          width={game.gameboard[game.turn].current.length}\n          setDidDrop={setDidDrop}\n        />\n      )}\n    </DndProvider>\n  );\n};\n\nexport default GameArea;\n","import React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\n\n// context\nimport { VisibilityContext } from \"../contexts\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 90%;\n  justify-content: space-evenly;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  margin: 0 15vw;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n`;\n\nconst Button = styled.button`\n  display: block;\n  font-size: 1.2rem;\n  padding: 0;\n  flex-grow: 1;\n  margin: 0 10vw 8vw;\n  border: 1px solid transparent;\n  border-radius: 10px;\n  -webkit-box-shadow: -5px 5px 9px 1px rgba(0, 0, 0, 0.3);\n  box-shadow: -5px 5px 9px 1px rgba(0, 0, 0, 0.2);\n`;\n\nconst ButtonChoice = ({ data: { title, options } }) => {\n  const [isClicked, setIsClicked] = useState(false);\n  const { visible } = useContext(VisibilityContext);\n  return (\n    <Container>\n      <TitleContainer className={visible ? \"fadeIn\" : \"fadeOut\"}>\n        <h2>{title}</h2>\n      </TitleContainer>\n      {options.map((option, i) => {\n        const delay = 200 + i * 100;\n        let style = {\n          transition: `bottom 0.3s linear ${delay}ms, opacity 0.3s linear ${delay}ms, background-color 0.15s linear`,\n          backgroundColor: isClicked === i ? \"#c4ffce\" : \"white\",\n        };\n        return (\n          <Button\n            key={option.key}\n            onClick={() => {\n              setIsClicked(i);\n              option.reportClick();\n              setTimeout(() => {\n                setIsClicked(false);\n              }, 1200);\n            }}\n            className={visible ? \"zip center\" : \"zip down\"}\n            style={style}\n          >\n            {option.text}\n          </Button>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default ButtonChoice;\n","import { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\n\n// game logic\nimport Gameboard from \"./functions/gameBoardFactory\";\nimport Ship from \"./functions/shipFactory\";\nimport Player from \"./functions/playerFactory\";\n\n// components\nimport Warnings from \"./components/Warnings\";\nimport Header from \"./components/Header\";\nimport GameArea from \"./components/GameArea\";\nimport ButtonChoice from \"./components/ButtonChoice\";\n\n// stylesheet\nimport \"./App.css\";\n\n// context\nimport { VisibilityContext } from \"./contexts\";\n\n// styled components\nconst Bold = styled.span`\n  font-weight: bold;\n`;\n\nfunction App() {\n  // game state\n  const [size, setSize] = useState(undefined);\n  const [isSinglePlayer, setisSinglePlayer] = useState(undefined);\n  const [game, setGame] = useState(null);\n  const [shipsPlaced, setShipsPlaced] = useState(false);\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\n\n  // component state\n  const [buttonChoiceData, setButtonChoiceData] = useState(null);\n\n  // render state\n  const [visible, setVisible] = useState(false);\n  const [fadingOut, setFadingOut] = useState(false);\n  const VisibilityValue = { visible };\n\n  const reportEvent = useCallback(\n    (cb) => {\n      setFadingOut(true);\n      setTimeout(() => setVisible(false), game ? 800 : 400);\n      setTimeout(\n        () => {\n          setFadingOut(false);\n          cb();\n        },\n        game ? 1500 : 1000\n      );\n    },\n    [game]\n  );\n\n  // fade in\n  useEffect(() => {\n    if (!visible && !fadingOut) {\n      setTimeout(() => setVisible(true), 100);\n    }\n  }, [visible, fadingOut]);\n\n  // NEW GAME\n  useEffect(() => {\n    if (!size || isSinglePlayer === undefined) {\n      return;\n    }\n    // ready to go\n    const getShips = (boardSize) => {\n      const shipSelection = [5, 4, 3, 3, 2];\n      return shipSelection\n        .slice((10 - boardSize) / 2)\n        .map((shipLength) => Ship(shipLength));\n    };\n    let ships = [getShips(size), getShips(size)];\n    const player2 = isSinglePlayer && Player();\n    let player2gameboard = Gameboard(size);\n    if (isSinglePlayer) {\n      // insert AI ships\n      while (ships[1].length) {\n        player2.placeOwnShip(player2gameboard, ships[1].pop());\n      }\n    }\n    const newGame = {\n      player2,\n      gameboard: [Gameboard(size), player2gameboard],\n      ships,\n      turn: 0,\n    };\n    setGame(newGame);\n    setButtonChoiceData(null);\n  }, [isSinglePlayer, size]);\n\n  // PLACING SHIPS\n  const placeShip = (coordinates, isVertical) => {\n    let didPlace;\n    setGame((prevGame) => {\n      const newGame = Object.assign({}, prevGame);\n      didPlace = newGame.gameboard[prevGame.turn].insertShip({\n        ship: newGame.ships[prevGame.turn][0],\n        isVertical,\n        coordinates,\n        isConfirmed: true,\n      }).isValid;\n      if (didPlace) {\n        newGame.ships[prevGame.turn].shift();\n      }\n      return newGame;\n    });\n    return didPlace;\n  };\n\n  const handleAllShipsPlaced = useCallback(() => {\n    const swapBoards = () => {\n      setGame((prevGame) => {\n        const newGame = Object.assign({}, prevGame);\n        const [board1, board2] = prevGame.gameboard;\n        newGame.gameboard = [board2, board1];\n        return newGame;\n      });\n    };\n    setShipsPlaced(true);\n    swapBoards();\n  }, []);\n\n  // GAME OVER\n\n  const handleGameOver = useCallback(\n    (winner, isSinglePlayer) => {\n      const resetParameters = () => {\n        setSize(undefined);\n        setisSinglePlayer(undefined);\n        setShipsPlaced(false);\n      };\n      const proclamation = !isSinglePlayer\n        ? `Player ${winner === 0 ? \"1\" : \"2\"} is the winner!`\n        : winner === 0\n        ? \"Congratulations, you won!\"\n        : \"Sorry, looks like you lost this time...\";\n      setButtonChoiceData({\n        title: proclamation,\n        options: [\n          {\n            reportClick: () => reportEvent(() => resetParameters()),\n            text: \"Let's go again!\",\n          },\n        ],\n      });\n    },\n    [reportEvent]\n  );\n\n  // TURN MECHANICS\n\n  // change turn\n  const changeTurn = useCallback(() => {\n    setButtonChoiceData(null);\n    const winner = game.gameboard.findIndex((board) => board.isOver);\n    if (winner > -1) {\n      handleGameOver(winner, isSinglePlayer);\n      return;\n    }\n    if (game.turn === 0 && isSinglePlayer) {\n      // will be computer's turn\n      setIsComputerTurn(true);\n    }\n    setGame((prevGame) => {\n      const newGame = Object.assign({}, prevGame);\n      newGame.turn = !!prevGame.turn ? 0 : 1;\n      if (shipsPlaced) {\n        return newGame;\n      }\n      if (newGame.ships.every((shipArray) => !shipArray.length)) {\n        handleAllShipsPlaced();\n      }\n      return newGame;\n    });\n  }, [game, handleAllShipsPlaced, handleGameOver, isSinglePlayer, shipsPlaced]);\n\n  // TWO PLAYER\n  const proposeChangeTurn = () => {\n    if (isSinglePlayer && !shipsPlaced && !game.ships[0].length) {\n      // only human player just placed last ship\n      handleAllShipsPlaced();\n      return;\n    }\n    if (!isSinglePlayer) {\n      const playerNo = game.turn === 0 ? \"2\" : \"1\";\n      setButtonChoiceData({\n        title: [\n          `It's Player ${playerNo}'s turn!`,\n          <br />,\n          <br />,\n          `Please pass the device.`,\n        ],\n        options: [\n          {\n            reportClick: () => reportEvent(() => changeTurn()),\n            text: [<Bold>{`Player ${playerNo}`}</Bold>, \" here!\"],\n            key: `P${playerNo}`,\n          },\n        ],\n      });\n    }\n  };\n\n  // SINGLE PLAYER\n  useEffect(() => {\n    const takeComputerTurn = () => {\n      setGame((prevGame) => {\n        const newGame = Object.assign({}, prevGame);\n        // FIX: Will occur twice in Strict Mode :(\n        newGame.player2.takeTurn(newGame.gameboard[1]);\n        return newGame;\n      });\n    };\n    // if computer's turn, take turn\n    if (isComputerTurn) {\n      setTimeout(() => {\n        takeComputerTurn();\n        reportEvent(() => {\n          changeTurn();\n        });\n      }, 1000);\n    }\n    setIsComputerTurn(false);\n    // Must NOT have isComputerTurn as a dependency to prevent running a second time\n    // after updating\n    /* eslint-disable */\n  }, [changeTurn, reportEvent]);\n\n  // CHECK GAME OVER\n  useEffect(() => {}, [game]);\n\n  // ASK USER QUESTIONS\n  useEffect(() => {\n    if (!size) {\n      // QUESTION 1\n      setButtonChoiceData({\n        title: \"Which board size would you like today?\",\n        options: [\n          {\n            reportClick: () => reportEvent(() => setSize(6)),\n            text: [\"I'm in a rush, \", <Bold>6x6</Bold>, \" please.\"],\n            key: \"6x6\",\n          },\n          {\n            reportClick: () => reportEvent(() => setSize(8)),\n            text: [\"I've got time for an \", <Bold>8x8</Bold>, \" board.\"],\n            key: \"8x8\",\n          },\n          {\n            reportClick: () => reportEvent(() => setSize(10)),\n            text: [\"The classic - \", <Bold>10x10</Bold>, \".\"],\n            key: \"10x10\",\n          },\n        ],\n      });\n      return;\n    }\n    if (isSinglePlayer === undefined) {\n      // QUESTION 2\n      setButtonChoiceData({\n        title: \"Are you playing by yourself or with a friend?\",\n        options: [\n          {\n            reportClick: () => reportEvent(() => setisSinglePlayer(true)),\n            text: [\"Just me (\", <Bold>1 player</Bold>, \").\"],\n            key: \"1player\",\n          },\n          {\n            reportClick: () => reportEvent(() => setisSinglePlayer(false)),\n            text: [\"Got a friend here (\", <Bold>2 players</Bold>, \").\"],\n            key: \"2player\",\n          },\n        ],\n      });\n      return;\n    }\n  }, [size, isSinglePlayer, reportEvent]);\n\n  return (\n    <div className=\"App\">\n      <Warnings />\n      <Header />\n      <VisibilityContext.Provider value={VisibilityValue}>\n        {game && !buttonChoiceData && (\n          <GameArea\n            game={game}\n            computerTurn={isSinglePlayer && game.turn === 1}\n            shipsPlaced={shipsPlaced}\n            placeShip={game.ships[game.turn].length ? placeShip : undefined}\n            placeLastShip={\n              game.ships[game.turn].length === 1\n                ? () => {\n                    reportEvent(() => proposeChangeTurn());\n                  }\n                : undefined\n            }\n            changeTurn={\n              isSinglePlayer\n                ? () => reportEvent(() => changeTurn())\n                : () => reportEvent(() => proposeChangeTurn())\n            }\n          />\n        )}\n        {buttonChoiceData && <ButtonChoice data={buttonChoiceData} />}\n      </VisibilityContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}