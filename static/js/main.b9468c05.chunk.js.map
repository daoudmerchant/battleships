{"version":3,"sources":["factories/gameBoardFactory.js","factories/shipFactory.js","factories/playerFactory.js","components/Warnings.js","components/Header.js","components/Cell.js","contexts.js","components/Gameboard.js","components/ShipPiece.js","components/ShipPalette.js","components/GameArea.js","components/ButtonChoice.js","App.js","index.js"],"names":["Gameboard","size","_gameboard","_shipsSunk","i","row","j","push","containsShip","isHit","_exists","gameboard","col","receiveAttack","hitShip","insertShip","ship","isVertical","coordinates","isConfirmed","thisGameboard","clone","isPossible","length","_loopThroughShipSquares","cb","thisSquare","hit","isSunk","isDummy","isValid","newGameboard","every","shipIsSunk","Ship","Array","fill","sunk","_isSunk","square","Error","Player","checkFor","_filterOrCheck","item","filteredArray","filter","_isTruthy","hitButNotSunk","square_s","boardsquare","unhit","missed","truthy","allTruthy","squares","getAdjacentSquare","currentGameboard","left","right","up","down","processBoard","predictiveMoves","undefined","backupMoves","randomMoves","entries","cell","squareToRight","squareToLeft","squareAbove","squareBelow","squareList","adjacentSquares","unhitSquares","map","oppositeSquareList","options","squareA","squareB","forEach","_getRandom","array","Math","floor","random","findShipPlacements","shipLength","freeAxisSquares","index","a","b","squareBefore","isArray","val","arrayIndex","slice","flat","takeTurn","nextMove","current","placeOwnShip","shipPlacements","insertion","test","WarningContainer","styled","div","NoTouchWarning","LandscapeWarning","Bold","span","Warnings","memo","style","fontSize","HeaderContainer","Header","GameCell","props","backgroundColor","hasContents","Cell","contents","placeShip","setHoverGameboard","reportDrop","placeLastShip","shipsPlaced","useDrop","accept","drop","monitor","type","getItemType","confirm","deny","hover","ref","onClick","VisibilityContext","createContext","GameboardDiv","boardSize","visible","gridDisplayWidth","didDrop","setDidDrop","incrementTurn","changeTurn","computerTurn","useState","displayedGameboard","setDisplayedGameboard","useContext","Letters","useMemo","LetterArray","String","fromCharCode","resetDisplayedGameboard","useCallback","useEffect","hoverGameboard","isTrueDrop","letter","width","ShipPiece","useDrag","collect","isDragging","end","drag","ShipPreview","usePreview","display","Container","ShipContainer","Caption","p","ShipPalette","Turn","GameArea","game","isGameOver","turnCount","setTurnCount","DndProvider","backend","TouchBackend","turn","player2","ships","count","opacity","TitleContainer","Button","button","wasClicked","delay","ButtonChoice","data","title","isClicked","setIsClicked","option","reportClick","setTimeout","text","key","GlobalStyle","createGlobalStyle","App","setSize","isSinglePlayer","setisSinglePlayer","setGame","setShipsPlaced","isComputerTurn","setIsComputerTurn","buttonChoiceData","setButtonChoiceData","setVisible","fadingOut","setFadingOut","VisibilityValue","reportEvent","getShips","player2gameboard","pop","newGame","handleAllShipsPlaced","prevGame","Object","assign","board1","board2","handleGameOver","winner","proclamation","findIndex","board","isOver","shipArray","proposeChangeTurn","playerNo","className","Provider","value","didPlace","shift","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9468c05.chunk.js","sourcesContent":["import clone from \"just-clone\";\nimport \"babel-polyfill\";\n\nconst Gameboard = (size) => {\n  /*\n    for some reason, following doesn't work with placeShip method:\n\n    let gameboard = new Array(size).fill(new Array(size).fill({...}));\n  */\n  let _gameboard = [];\n  let _shipsSunk = [];\n\n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      row.push({\n        containsShip: false,\n        isHit: false,\n      });\n    }\n    _gameboard.push(row);\n  }\n\n  const _exists = (gameboard, [row, col]) =>\n    gameboard[row] && gameboard[row][col];\n\n  const insertShip = ({ ship, isVertical, coordinates, isConfirmed }) => {\n    const thisGameboard = isConfirmed ? _gameboard : clone(_gameboard);\n    const [row, col] = coordinates;\n    let isPossible = true;\n    if (\n      (isVertical && row + ship.length > size) ||\n      (!isVertical && col + ship.length > size)\n    ) {\n      isPossible = false;\n    }\n    const _loopThroughShipSquares = (gameboard, cb) => {\n      for (let i = 0; i < ship.length; i++) {\n        const thisRow = isVertical ? row + i : row;\n        const thisCol = isVertical ? col : col + i;\n        cb(gameboard, [thisRow, thisCol], i);\n      }\n    };\n\n    const _placeShip = (gameboard, [row, col], i) => {\n      gameboard[row][col] = {\n        containsShip: true,\n        isHit: false,\n        hitShip: () => {\n          ship.hit(i);\n        },\n        get shipIsSunk() {\n          return ship.isSunk;\n        },\n      };\n    };\n\n    const _testShipValidity = (gameboard, [row, col]) => {\n      const thisSquare = _exists(gameboard, [row, col]);\n      if (!thisSquare || thisSquare.containsShip) {\n        // doesn't exist or already has ship\n        isPossible = false;\n      }\n    };\n\n    const _placeShipDummy = (gameboard, [row, col]) => {\n      const validDummyShipPiece = {\n        containsShip: true,\n        isDummy: true,\n        isValid: true,\n      };\n      const invalidDummyShipPiece = {\n        containsShip: true,\n        isDummy: true,\n        isValid: false,\n      };\n      if (_exists(gameboard, [row, col])) {\n        // exists\n        gameboard[row][col] = isPossible\n          ? validDummyShipPiece\n          : invalidDummyShipPiece;\n      }\n    };\n    // validity check\n    _loopThroughShipSquares(thisGameboard, _testShipValidity);\n\n    if (isConfirmed && isPossible) {\n      // successful real placement\n      _loopThroughShipSquares(thisGameboard, _placeShip);\n      _shipsSunk.push(() => ship.isSunk);\n    } else if (!isConfirmed) {\n      // dummy placement\n      _loopThroughShipSquares(thisGameboard, _placeShipDummy);\n    }\n    return {\n      newGameboard: thisGameboard,\n      isValid: isPossible,\n    };\n  };\n  const receiveAttack = ([row, col]) => {\n    if (_gameboard[row][col].isHit) {\n      return false;\n    }\n    if (_gameboard[row][col].containsShip) {\n      _gameboard[row][col].hitShip();\n    }\n    _gameboard[row][col].isHit = true;\n    return true;\n  };\n\n  return {\n    get current() {\n      return _gameboard;\n    },\n    receiveAttack,\n    insertShip,\n    get isOver() {\n      return (\n        !!_shipsSunk.length && _shipsSunk.every((shipIsSunk) => shipIsSunk())\n      );\n    },\n  };\n};\n\nexport default Gameboard;\n","const Ship = (length) => {\n  let ship = {\n    length,\n    isHit: new Array(length).fill(false),\n    sunk: false,\n  };\n  const _isSunk = () => {\n    if (!ship.sunk) {\n      const shipIsSunk = ship.isHit.every((square) => square);\n      if (shipIsSunk) {\n        ship.sunk = true;\n      }\n    }\n    return ship.sunk;\n  };\n  const hit = (i) => {\n    if (i > ship.length - 1) {\n      throw new Error(\"Index longer than ship\");\n    }\n    ship.isHit[i] = true;\n    return _isSunk();\n  };\n\n  return {\n    length,\n    hit,\n    get hits() {\n      return ship.isHit;\n    },\n    get isSunk() {\n      return _isSunk();\n    },\n  };\n};\n\nexport default Ship;\n","const Player = () => {\n  const checkFor = (() => {\n    const _filterOrCheck = (item, cb) => {\n      if (item.length) {\n        const filteredArray = item.filter(cb);\n        return filteredArray.length && filteredArray;\n      } else if (typeof item === \"object\") {\n        return cb(item);\n      } else {\n        throw new Error(\"Only accepts arrays or objects\");\n      }\n    };\n\n    const hitButNotSunk = (square_s) => {\n      const _isHitButNotSunk = (square) =>\n        square.boardsquare.isHit &&\n        square.boardsquare.containsShip &&\n        !square.boardsquare.shipIsSunk;\n      return _filterOrCheck(square_s, _isHitButNotSunk);\n    };\n    const unhit = (square_s) => {\n      const _isUnhit = (square) => !square.boardsquare.isHit;\n      return _filterOrCheck(square_s, _isUnhit);\n    };\n    const hit = (square_s) => {\n      const _isHit = (square) => square.boardsquare.isHit;\n      return _filterOrCheck(square_s, _isHit);\n    };\n    const missed = (square_s) => {\n      const _isMissed = (square) =>\n        square.boardsquare.isHit && !square.boardsquare.containsShip;\n      return _filterOrCheck(square_s, _isMissed);\n    };\n    const _isTruthy = (square) => square;\n    const truthy = (square_s) => {\n      return _filterOrCheck(square_s, _isTruthy);\n    };\n    const allTruthy = (squares) => squares.every(_isTruthy);\n\n    return {\n      hitButNotSunk,\n      unhit,\n      hit,\n      missed,\n      truthy,\n      allTruthy,\n    };\n  })();\n\n  const getAdjacentSquare = (() => {\n    const _exists = (currentGameboard, [row, col]) => {\n      return currentGameboard[row] && currentGameboard[row][col];\n    };\n\n    const left = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row, col - 1]) && {\n          coordinates: [row, col - 1],\n          boardsquare: currentGameboard[row][col - 1],\n        }\n      );\n    };\n    const right = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row, col + 1]) && {\n          coordinates: [row, col + 1],\n          boardsquare: currentGameboard[row][col + 1],\n        }\n      );\n    };\n    const up = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row - 1, col]) && {\n          coordinates: [row - 1, col],\n          boardsquare: currentGameboard[row - 1][col],\n        }\n      );\n    };\n    const down = (currentGameboard, [row, col]) => {\n      return (\n        _exists(currentGameboard, [row + 1, col]) && {\n          coordinates: [row + 1, col],\n          boardsquare: currentGameboard[row + 1][col],\n        }\n      );\n    };\n    return {\n      left,\n      right,\n      up,\n      down,\n    };\n  })();\n\n  const processBoard = (gameboard) => {\n    let predictiveMoves = undefined;\n    let backupMoves = undefined;\n    let randomMoves = [];\n    const _pushToBackup = (array) => {\n      array.forEach((item) => backupMoves.push(item.coordinates));\n    };\n\n    for (let [i, row] of gameboard.entries()) {\n      for (let [j, cell] of row.entries()) {\n        if (cell.isHit && cell.containsShip && !cell.shipIsSunk) {\n          // HIT\n          // check surrounding squares\n          const squareToRight = getAdjacentSquare.right(gameboard, [i, j]);\n          const squareToLeft = getAdjacentSquare.left(gameboard, [i, j]);\n          const squareAbove = getAdjacentSquare.up(gameboard, [i, j]);\n          const squareBelow = getAdjacentSquare.down(gameboard, [i, j]);\n          const squareList = [\n            squareToRight,\n            squareToLeft,\n            squareAbove,\n            squareBelow,\n          ];\n          const adjacentSquares = checkFor.truthy(squareList);\n          const unhitSquares = checkFor.unhit(adjacentSquares);\n          if (!unhitSquares.length) {\n            // no adjacent squares to try, move on\n            continue;\n          }\n          const shipsInProgress = checkFor.hitButNotSunk(adjacentSquares);\n          if (!shipsInProgress.length) {\n            // all unhit squares worth trying\n            predictiveMoves = unhitSquares.map((square) => square.coordinates);\n            break;\n          }\n          // check for hit square opposite unhit square\n          const oppositeSquareList = [\n            squareToLeft,\n            squareToRight,\n            squareBelow,\n            squareAbove,\n          ];\n          let options = [];\n          for (let i = 0; i < 4; i++) {\n            const squareA = squareList[i];\n            const squareB = oppositeSquareList[i];\n\n            if (\n              checkFor.allTruthy([squareA, squareB]) &&\n              checkFor.unhit(squareA) &&\n              checkFor.hitButNotSunk(squareB)\n            ) {\n              // unhit square worth trying\n              options.push(squareA.coordinates);\n            } else if (\n              squareA &&\n              checkFor.hitButNotSunk(squareA) &&\n              (!squareB || checkFor.hit(squareB))\n            ) {\n              // might extend in a different axis\n              if (!backupMoves) {\n                backupMoves = [];\n              }\n              const unhitSquares = checkFor.unhit(adjacentSquares);\n              unhitSquares && _pushToBackup(unhitSquares);\n            }\n          }\n          if (options.length) {\n            predictiveMoves = options;\n            break;\n          }\n        } else if (!cell.isHit) {\n          randomMoves.push([i, j]);\n        }\n      }\n      if (predictiveMoves) {\n        // got some squares to try, bail out\n        break;\n      }\n    }\n    return predictiveMoves || backupMoves || randomMoves;\n  };\n\n  const _getRandom = (array) => {\n    if (array.length === 1) {\n      return array[0];\n    }\n    return array[Math.floor(Math.random() * array.length)];\n  };\n\n  const takeTurn = (gameboard) => {\n    const nextMove = _getRandom(processBoard(gameboard.current));\n    gameboard.receiveAttack(nextMove);\n  };\n\n  const findShipPlacements = ({ currentGameboard, shipLength, isVertical }) => {\n    let freeAxisSquares = [];\n    currentGameboard.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        const index = isVertical ? j : i;\n        if (cell.containsShip) {\n          return;\n        }\n        const getLastItem = (array) => {\n          return array[array.length - 1];\n        };\n        function arraysAreEqual(a, b) {\n          return (\n            Array.isArray(a) &&\n            Array.isArray(b) &&\n            a.length === b.length &&\n            a.every((val, arrayIndex) => val === b[arrayIndex])\n          );\n        }\n        // available\n        const squareBefore = isVertical ? [i - 1, j] : [i, j - 1];\n        if (\n          freeAxisSquares[index] &&\n          arraysAreEqual(getLastItem(freeAxisSquares[index]), squareBefore)\n        ) {\n          // last coordinates were square above\n          freeAxisSquares[index].push([i, j]);\n        } else {\n          freeAxisSquares[index] = [[i, j]];\n        }\n      });\n    });\n    return (\n      freeAxisSquares\n        // long enough to fit ship\n        .filter((array) => array.length >= shipLength)\n        // get all possible start coordinates\n        .map((array) => array.slice(0, 1 - shipLength))\n        .flat()\n    );\n  };\n\n  const placeOwnShip = (gameboard, ship) => {\n    const isVertical = Math.random() < 0.5;\n    const shipPlacements = findShipPlacements({\n      currentGameboard: gameboard.current,\n      shipLength: ship.length,\n      isVertical,\n    });\n    const randomShipPlacement = _getRandom(shipPlacements);\n    const insertion = {\n      ship,\n      isVertical,\n      coordinates: randomShipPlacement,\n      isConfirmed: true,\n    };\n    gameboard.insertShip(insertion);\n  };\n  return {\n    takeTurn,\n    placeOwnShip,\n    test: {\n      checkFor,\n      getAdjacentSquare,\n      processBoard,\n      findShipPlacements,\n    },\n  };\n};\n\nexport default Player;\n","import React, { memo } from \"react\";\nimport styled from \"styled-components\";\n\nconst WarningContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  background-color: bisque;\n`;\n\nconst NoTouchWarning = styled(WarningContainer)`\n  z-index: 2;\n  @media (hover: none) {\n    display: none;\n  }\n  @media (pointer: coarse) {\n    display: none;\n  }\n`;\n\nconst LandscapeWarning = styled(WarningContainer)`\n  z-index: 1;\n  @media (orientation: portrait) {\n    display: none;\n  }\n`;\n\nconst Bold = styled.span`\n  font-weight: bold;\n`;\n\nconst Warnings = memo(() => {\n  return (\n    <>\n      <NoTouchWarning>\n        <h1 style={{ fontSize: \"3rem\" }}>Sorry!</h1>\n        <p style={{ fontSize: \"2rem\" }}>\n          {[\n            \"This app has been optimised for \",\n            <Bold>touch devices</Bold>,\n            \".\",\n          ]}\n        </p>\n      </NoTouchWarning>\n      <LandscapeWarning>\n        <p style={{ fontSize: \"2.5rem\" }}>\n          {[\n            \"Please hold your device in \",\n            <Bold>portrait orientation</Bold>,\n            \".\",\n          ]}\n        </p>\n      </LandscapeWarning>\n    </>\n  );\n});\n\nexport default Warnings;\n","import React, { memo } from \"react\";\nimport styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  h1 {\n    margin: 0;\n  }\n`;\n\nconst Header = memo(() => {\n  return (\n    <HeaderContainer>\n      <h1>Battleships</h1>\n    </HeaderContainer>\n  );\n});\n\nexport default Header;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDrop } from \"react-dnd\";\n\nconst GameCell = styled.div`\n  height: 100%;\n  background-color: ${(props) => props.backgroundColor};\n  width: 100%;\n  border: ${(props) => (props.hasContents ? \"none\" : \"1px solid lightgrey\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Cell = ({\n  cell = {},\n  contents,\n  coordinates,\n  placeShip,\n  setHoverGameboard,\n  reportDrop,\n  placeLastShip,\n  takeTurn,\n  shipsPlaced,\n}) => {\n  const { containsShip, isDummy, isValid, isHit, shipIsSunk } = cell;\n\n  const [, drop] = useDrop(() => ({\n    accept: [\"SHIP-VERTICAL\", \"SHIP-HORIZONTAL\"],\n    drop: (item, monitor) => {\n      if (!coordinates) {\n        return;\n      }\n      const type = monitor.getItemType();\n      const isVertical = type === \"SHIP-VERTICAL\" ? true : false;\n      let didPlace = placeShip(coordinates, isVertical);\n      if (!didPlace) {\n        reportDrop.deny();\n        return;\n      }\n      reportDrop.confirm(true);\n      placeLastShip?.();\n    },\n    hover(props, monitor) {\n      if (contents) {\n        reportDrop.deny();\n        return;\n      }\n      const type = monitor.getItemType();\n      const isVertical = type === \"SHIP-VERTICAL\" ? true : false;\n      setHoverGameboard(coordinates, isVertical);\n      reportDrop.confirm(false);\n    },\n  }));\n  const backgroundColor =\n    (shipsPlaced && isHit === false) || !!contents\n      ? \"transparent\"\n      : shipIsSunk\n      ? \"lightgrey\"\n      : containsShip && ((isHit && shipsPlaced) || (!isDummy && !shipsPlaced))\n      ? \"red\"\n      : containsShip && isDummy && isValid\n      ? \"lightgreen\"\n      : containsShip && isDummy && isValid === false\n      ? \"orange\"\n      : \"rgb(215, 245, 255)\";\n  return (\n    <GameCell\n      ref={drop}\n      backgroundColor={backgroundColor}\n      hasContents={!!contents}\n      onClick={\n        takeTurn\n          ? () => {\n              takeTurn(coordinates);\n            }\n          : undefined\n      }\n    >\n      {contents}\n    </GameCell>\n  );\n};\n\nexport default Cell;\n","import { createContext } from \"react\";\n\nconst VisibilityContext = createContext();\n\nexport { VisibilityContext };\n","import React, {\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n  useContext,\n} from \"react\";\nimport styled from \"styled-components\";\n\n// components\nimport Cell from \"./Cell\";\n\n// contexts\nimport { VisibilityContext } from \"../contexts\";\n\nconst GameboardDiv = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${(props) => props.boardSize + 1}, 1fr);\n  grid-template-columns: repeat(${(props) => props.boardSize + 1}, 1fr);\n  margin: 0 auto;\n  grid-gap: 1px;\n  flex-grow: 0;\n  opacity: ${(props) => (props.visible ? \"1\" : \"0\")};\n  width: ${(props) => props.gridDisplayWidth};\n  height: ${(props) => props.gridDisplayWidth};\n`;\n\nconst Gameboard = ({\n  gameboard,\n  gridDisplayWidth,\n  ship,\n  placeShip,\n  shipsPlaced,\n  didDrop,\n  setDidDrop,\n  placeLastShip,\n  incrementTurn,\n  changeTurn,\n  computerTurn,\n}) => {\n  const boardSize = gameboard.current.length;\n  const [displayedGameboard, setDisplayedGameboard] = useState(\n    gameboard.current\n  );\n  const { visible } = useContext(VisibilityContext);\n\n  const Letters = useMemo(() => {\n    let LetterArray = [];\n    for (let i = 0; i < boardSize; i++) {\n      LetterArray.push(String.fromCharCode(65 + i));\n    }\n    return LetterArray;\n  }, [boardSize]);\n\n  const resetDisplayedGameboard = useCallback(() => {\n    setDisplayedGameboard(gameboard.current);\n  }, [gameboard]);\n\n  useEffect(() => {\n    if (!didDrop) {\n      resetDisplayedGameboard();\n    }\n  }, [didDrop, resetDisplayedGameboard]);\n\n  const setHoverGameboard = (coordinates, isVertical) => {\n    const hoverGameboard = gameboard.insertShip({\n      ship,\n      isVertical,\n      coordinates,\n      isConfirmed: false,\n    });\n    setDisplayedGameboard(hoverGameboard.newGameboard);\n  };\n\n  const takeTurn = (coordinates) => {\n    const turn = gameboard.receiveAttack(coordinates);\n    if (!turn) {\n      return;\n    }\n    incrementTurn();\n    changeTurn();\n  };\n\n  // const GameCell = ({ cell, row, col }) => {\n  //   TODO: hover works but drop ship doesn't(??)\n  //   return (\n  //     <Cell\n  //       cell={cell}\n  //       key={`square${row}-${col}`}\n  //       coordinates={[Number(row), Number(col)]}\n  //       placeShip={placeShip}\n  //       placeLastShip={placeLastShip}\n  //       setHoverGameboard={setHoverGameboard}\n  //       resetDisplayedGameboard={resetDisplayedGameboard}\n  //       reportDrop={reportDrop}\n  //       takeTurn={shipsPlaced ? takeTurn : undefined}\n  //     />\n  //   );\n  // };\n\n  const reportDrop = (() => {\n    const confirm = (isTrueDrop) => {\n      setDidDrop(true);\n      if (!isTrueDrop) {\n        return;\n      }\n      incrementTurn();\n    };\n    const deny = () => {\n      setDidDrop(false);\n    };\n    return {\n      confirm,\n      deny,\n    };\n  })();\n\n  return (\n    <GameboardDiv\n      visible={visible}\n      boardSize={boardSize}\n      gridDisplayWidth={gridDisplayWidth}\n    >\n      <Cell contents={\" \"} reportDrop={reportDrop} />\n      {Letters.map((letter) => (\n        <Cell\n          contents={letter}\n          key={`letter${letter}`}\n          reportDrop={reportDrop}\n        />\n      ))}\n      {displayedGameboard &&\n        displayedGameboard.map((row, i) =>\n          row.map((cell, j) => {\n            if (j === 0 || j % (boardSize + 1) === 0) {\n              return (\n                <>\n                  <Cell\n                    contents={i + 1}\n                    key={`num${i + 1}`}\n                    reportDrop={reportDrop}\n                  />\n                  <Cell\n                    cell={cell}\n                    key={`square${i}-${j}`}\n                    coordinates={[i, j]}\n                    placeShip={placeShip}\n                    placeLastShip={placeLastShip}\n                    setHoverGameboard={setHoverGameboard}\n                    reportDrop={reportDrop}\n                    takeTurn={\n                      shipsPlaced && !computerTurn ? takeTurn : undefined\n                    }\n                    shipsPlaced={shipsPlaced}\n                    changeTurn={changeTurn}\n                  />\n                </>\n              );\n            } else {\n              return (\n                <Cell\n                  cell={cell}\n                  key={`square${i}-${j}`}\n                  coordinates={[i, j]}\n                  placeShip={placeShip}\n                  placeLastShip={placeLastShip}\n                  setHoverGameboard={setHoverGameboard}\n                  reportDrop={reportDrop}\n                  takeTurn={shipsPlaced && !computerTurn ? takeTurn : undefined}\n                  shipsPlaced={shipsPlaced}\n                />\n              );\n            }\n          })\n        )}\n    </GameboardDiv>\n  );\n};\n\nexport default Gameboard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDrag } from \"react-dnd\";\nimport { usePreview } from \"react-dnd-preview\";\n\nconst Ship = styled.div`\n  background-color: ${(props) => (props.visible ? \"red\" : \"transparent\")};\n  display: block;\n  width: calc(\n    ${(props) => props.gridDisplayWidth} / ${(props) => props.width + 1} *\n      ${(props) => (props.isVertical ? \"1\" : props.shipLength)}\n  );\n  height: calc(\n    ${(props) => props.gridDisplayWidth} / ${(props) => props.width + 1} *\n      ${(props) => (props.isVertical ? props.shipLength : \"1\")}\n  );\n`;\n\nconst ShipPiece = ({\n  ship,\n  isVertical,\n  width,\n  gridDisplayWidth,\n  setDidDrop,\n}) => {\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: isVertical ? \"SHIP-VERTICAL\" : \"SHIP-HORIZONTAL\",\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    end: (item, monitor) => {\n      const didDrop = monitor.didDrop();\n      if (!didDrop) {\n        setDidDrop(false);\n      }\n    },\n  }));\n\n  const ShipPreview = () => {\n    const { display, style } = usePreview();\n    if (!display) {\n      return null;\n    }\n    return (\n      <Ship\n        visible={isDragging}\n        gridDisplayWidth={gridDisplayWidth}\n        isVertical={isVertical}\n        width={width}\n        shipLength={ship.length}\n        style={style}\n      />\n    );\n  };\n  return (\n    <>\n      <Ship\n        ref={drag}\n        visible={!isDragging}\n        gridDisplayWidth={gridDisplayWidth}\n        isVertical={isVertical}\n        width={width}\n        shipLength={ship.length}\n      />\n      <ShipPreview />\n    </>\n  );\n};\n\nexport default ShipPiece;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\n// component\nimport ShipPiece from \"./ShipPiece\";\n\n// contexts\nimport { VisibilityContext } from \"../contexts\";\n\nconst Container = styled.div`\n  width: 90vw;\n  height: min-content;\n  margin: 20px auto;\n  opacity: ${(props) => (props.visible ? \"1\" : \"0\")};\n`;\n\nconst ShipContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst Caption = styled.p`\n  font-size: 1.3rem;\n`;\n\nconst Bold = styled.span`\n  font-weight: bold;\n`;\n\nconst ShipPalette = ({ ship, width, setDidDrop, gridDisplayWidth }) => {\n  const { visible } = useContext(VisibilityContext);\n  return (\n    <Container visible={visible}>\n      <Caption>\n        {[\"Drag \", <Bold>either</Bold>, \" ship on to the board\"]}\n      </Caption>\n      <ShipContainer>\n        {ship && (\n          <>\n            <ShipPiece\n              ship={ship}\n              width={width}\n              gridDisplayWidth={gridDisplayWidth}\n              setDidDrop={setDidDrop}\n              isVertical={false}\n            />\n            <ShipPiece\n              ship={ship}\n              width={width}\n              gridDisplayWidth={gridDisplayWidth}\n              setDidDrop={setDidDrop}\n              isVertical={true}\n            />\n          </>\n        )}\n      </ShipContainer>\n    </Container>\n  );\n};\n\nexport default ShipPalette;\n","import React, { useState, useContext } from \"react\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport styled from \"styled-components\";\n\n// components\nimport Gameboard from \"./Gameboard\";\nimport ShipPalette from \"./ShipPalette\";\n\n// contexts\nimport { VisibilityContext } from \"../contexts\";\n\nconst Turn = styled.p`\n  font-size: 1.2rem;\n  margin: 1em 0 0;\n  font-weight: bold;\n  // centralise board after having placed ships\n  margin-top: ${(props) => (props.shipsPlaced ? \"10vh\" : \"20px\")};\n  opacity: ${(props) => (props.visible ? \"1\" : \"0\")};\n`;\n\nconst gridDisplayWidth = \"82vw\";\n\nconst GameArea = ({\n  game,\n  isGameOver,\n  placeShip,\n  placeLastShip,\n  shipsPlaced,\n  changeTurn,\n  computerTurn,\n}) => {\n  const [didDrop, setDidDrop] = useState(true);\n  const [turnCount, setTurnCount] = useState(0);\n  const incrementTurn = () => {\n    setTurnCount((count) => count + 1);\n  };\n  const { visible } = useContext(VisibilityContext);\n  return (\n    <DndProvider backend={TouchBackend}>\n      <Turn visible={visible} shipsPlaced={shipsPlaced}>\n        {game.turn === 0 ? \"Player 1\" : game.player2 ? \"Computer\" : \"Player 2\"}\n      </Turn>\n      {isGameOver ? (\n        game.gameboard.map((gameboard, i) => {\n          return (\n            <Gameboard key={`board${i}`} gameboard={gameboard} length=\"40vw\" />\n          );\n        })\n      ) : (\n        <Gameboard\n          key={`${game.turn}${turnCount}`}\n          gridDisplayWidth={gridDisplayWidth}\n          gameboard={game.gameboard[game.turn]}\n          shipsPlaced={shipsPlaced}\n          ship={game.ships[game.turn][0]}\n          placeShip={placeShip}\n          didDrop={didDrop}\n          setDidDrop={setDidDrop}\n          placeLastShip={placeLastShip}\n          incrementTurn={incrementTurn}\n          changeTurn={changeTurn}\n          computerTurn={computerTurn}\n        />\n      )}\n      {shipsPlaced && !computerTurn && (\n        <p style={{ opacity: visible ? \"1\" : \"0\" }}>Tap to take a turn</p>\n      )}\n      {!shipsPlaced && (\n        <ShipPalette\n          ship={game.ships[game.turn][0]}\n          gridDisplayWidth={gridDisplayWidth}\n          width={game.gameboard[game.turn].current.length}\n          setDidDrop={setDidDrop}\n        />\n      )}\n    </DndProvider>\n  );\n};\n\nexport default GameArea;\n","import React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\n\n// context\nimport { VisibilityContext } from \"../contexts\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 90%;\n  justify-content: space-evenly;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  margin: 0 15vw;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n  opacity: ${(props) => (props.visible ? \"1\" : \"0\")};\n`;\n\nconst Button = styled.button`\n  display: block;\n  font-size: 1.2rem;\n  background-color: ${(props) => (props.wasClicked ? \"#c4ffce\" : \"white\")};\n  padding: 0;\n  flex-grow: 1;\n  transition: bottom 0.3s linear ${(props) => props.delay}ms,\n    opacity 0.3s linear ${(props) => props.delay}ms,\n    background-color 0.15s linear;\n  margin: 0 10vw 8vw;\n  border: 1px solid transparent;\n  border-radius: 10px;\n  box-shadow: -5px 5px 9px 1px rgba(0, 0, 0, 0.2);\n  position: relative;\n  opacity: ${(props) => (props.visible ? \"1\" : \"0\")};\n  bottom: ${(props) => (props.visible ? \"0\" : \"20px\")};\n`;\n\nconst ButtonChoice = ({ data: { title, options } }) => {\n  const [isClicked, setIsClicked] = useState(false);\n  const { visible } = useContext(VisibilityContext);\n  return (\n    <Container>\n      <TitleContainer visible={visible}>\n        <h2>{title}</h2>\n      </TitleContainer>\n      {options.map((option, i) => {\n        const delay = 200 + i * 100;\n        return (\n          <Button\n            key={option.key}\n            visible={visible}\n            wasClicked={isClicked === i}\n            delay={delay}\n            onClick={() => {\n              setIsClicked(i);\n              option.reportClick();\n              setTimeout(() => {\n                setIsClicked(false);\n              }, 1200);\n            }}\n          >\n            {option.text}\n          </Button>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default ButtonChoice;\n","import { useState, useEffect, useCallback } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\n// game logic\nimport Gameboard from \"./factories/gameBoardFactory\";\nimport Ship from \"./factories/shipFactory\";\nimport Player from \"./factories/playerFactory\";\n\n// components\nimport Warnings from \"./components/Warnings\";\nimport Header from \"./components/Header\";\nimport GameArea from \"./components/GameArea\";\nimport ButtonChoice from \"./components/ButtonChoice\";\n\n// // stylesheet\n// import \"./App.css\";\n\n// context\nimport { VisibilityContext } from \"./contexts\";\n\n// styled components\nconst GlobalStyle = createGlobalStyle`\nbody,\nhtml,\n#root,\n.App {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  background-color: rgba(181,130,181,0.05);\n  user-select: none;\n  box-sizing: border-box;\n  text-align: center;\n  position: relative;\n}\n\nbody {\n  font-family: \"Varela Round\", sans-serif;\n}\n\n/* fade */\n\n* {\n  transition: right 0.2s ease-in, left 0.2s ease-in, opacity 0.25s linear;\n}\n`;\n\nconst Bold = styled.span`\n  font-weight: bold;\n`;\n\nfunction App() {\n  // game state\n  const [size, setSize] = useState(undefined);\n  const [isSinglePlayer, setisSinglePlayer] = useState(undefined);\n  const [game, setGame] = useState(null);\n  const [shipsPlaced, setShipsPlaced] = useState(false);\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\n\n  // component state\n  const [buttonChoiceData, setButtonChoiceData] = useState(null);\n\n  // render state\n  const [visible, setVisible] = useState(false);\n  const [fadingOut, setFadingOut] = useState(false);\n  const VisibilityValue = { visible };\n\n  const reportEvent = useCallback(\n    (cb) => {\n      setFadingOut(true);\n      setTimeout(() => setVisible(false), game ? 800 : 400);\n      setTimeout(\n        () => {\n          setFadingOut(false);\n          cb();\n        },\n        game ? 1500 : 1000\n      );\n    },\n    [game]\n  );\n\n  // fade in\n  useEffect(() => {\n    if (!visible && !fadingOut) {\n      setTimeout(() => setVisible(true), 100);\n    }\n  }, [visible, fadingOut]);\n\n  // NEW GAME\n  useEffect(() => {\n    if (!size || isSinglePlayer === undefined) {\n      return;\n    }\n    // ready to go\n    const getShips = (boardSize) => {\n      const shipSelection = [5, 4, 3, 3, 2];\n      return shipSelection\n        .slice((10 - boardSize) / 2)\n        .map((shipLength) => Ship(shipLength));\n    };\n    let ships = [getShips(size), getShips(size)];\n    const player2 = isSinglePlayer && Player();\n    let player2gameboard = Gameboard(size);\n    if (isSinglePlayer) {\n      // insert AI ships\n      while (ships[1].length) {\n        player2.placeOwnShip(player2gameboard, ships[1].pop());\n      }\n    }\n    const newGame = {\n      player2,\n      gameboard: [Gameboard(size), player2gameboard],\n      ships,\n      turn: 0,\n    };\n    setGame(newGame);\n    setButtonChoiceData(null);\n  }, [isSinglePlayer, size]);\n\n  // PLACING SHIPS\n  const placeShip = (coordinates, isVertical) => {\n    let didPlace;\n    setGame((prevGame) => {\n      const newGame = Object.assign({}, prevGame);\n      didPlace = newGame.gameboard[prevGame.turn].insertShip({\n        ship: newGame.ships[prevGame.turn][0],\n        isVertical,\n        coordinates,\n        isConfirmed: true,\n      }).isValid;\n      if (didPlace) {\n        newGame.ships[prevGame.turn].shift();\n      }\n      return newGame;\n    });\n    return didPlace;\n  };\n\n  const handleAllShipsPlaced = useCallback(() => {\n    const swapBoards = () => {\n      setGame((prevGame) => {\n        const newGame = Object.assign({}, prevGame);\n        const [board1, board2] = prevGame.gameboard;\n        newGame.gameboard = [board2, board1];\n        return newGame;\n      });\n    };\n    setShipsPlaced(true);\n    swapBoards();\n  }, []);\n\n  // GAME OVER\n\n  const handleGameOver = useCallback(\n    (winner, isSinglePlayer) => {\n      const resetParameters = () => {\n        setSize(undefined);\n        setisSinglePlayer(undefined);\n        setShipsPlaced(false);\n      };\n      const proclamation = !isSinglePlayer\n        ? `Player ${winner === 0 ? \"1\" : \"2\"} is the winner!`\n        : winner === 0\n        ? \"Congratulations, you won!\"\n        : \"Sorry, looks like you lost this time...\";\n      setButtonChoiceData({\n        title: proclamation,\n        options: [\n          {\n            reportClick: () => reportEvent(() => resetParameters()),\n            text: \"Let's go again!\",\n          },\n        ],\n      });\n    },\n    [reportEvent]\n  );\n\n  // TURN MECHANICS\n\n  // change turn\n  const changeTurn = useCallback(() => {\n    setButtonChoiceData(null);\n    const winner = game.gameboard.findIndex((board) => board.isOver);\n    if (winner > -1) {\n      handleGameOver(winner, isSinglePlayer);\n      return;\n    }\n    if (game.turn === 0 && isSinglePlayer) {\n      // will be computer's turn\n      setIsComputerTurn(true);\n    }\n    setGame((prevGame) => {\n      const newGame = Object.assign({}, prevGame);\n      newGame.turn = !!prevGame.turn ? 0 : 1;\n      if (shipsPlaced) {\n        return newGame;\n      }\n      if (newGame.ships.every((shipArray) => !shipArray.length)) {\n        handleAllShipsPlaced();\n      }\n      return newGame;\n    });\n  }, [game, handleAllShipsPlaced, handleGameOver, isSinglePlayer, shipsPlaced]);\n\n  // TWO PLAYER\n  const proposeChangeTurn = () => {\n    if (isSinglePlayer && !shipsPlaced && !game.ships[0].length) {\n      // only human player just placed last ship\n      handleAllShipsPlaced();\n      return;\n    }\n    if (!isSinglePlayer) {\n      const playerNo = game.turn === 0 ? \"2\" : \"1\";\n      setButtonChoiceData({\n        title: [\n          `It's Player ${playerNo}'s turn!`,\n          <br />,\n          <br />,\n          `Please pass the device.`,\n        ],\n        options: [\n          {\n            reportClick: () => reportEvent(() => changeTurn()),\n            text: [<Bold>{`Player ${playerNo}`}</Bold>, \" here!\"],\n            key: `P${playerNo}`,\n          },\n        ],\n      });\n    }\n  };\n\n  // SINGLE PLAYER\n  useEffect(() => {\n    const takeComputerTurn = () => {\n      setGame((prevGame) => {\n        const newGame = Object.assign({}, prevGame);\n        // FIX: Will occur twice in Strict Mode :(\n        newGame.player2.takeTurn(newGame.gameboard[1]);\n        return newGame;\n      });\n    };\n    // if computer's turn, take turn\n    if (isComputerTurn) {\n      setTimeout(() => {\n        takeComputerTurn();\n        reportEvent(() => {\n          changeTurn();\n        });\n      }, 1000);\n    }\n    setIsComputerTurn(false);\n    // Must NOT have isComputerTurn as a dependency to prevent running a second time\n    // after updating\n    /* eslint-disable */\n  }, [changeTurn, reportEvent]);\n\n  // CHECK GAME OVER\n  useEffect(() => {}, [game]);\n\n  // ASK USER QUESTIONS\n  useEffect(() => {\n    if (!size) {\n      // QUESTION 1\n      setButtonChoiceData({\n        title: \"Which board size would you like today?\",\n        options: [\n          {\n            reportClick: () => reportEvent(() => setSize(6)),\n            text: [\"I'm in a rush, \", <Bold>6x6</Bold>, \" please.\"],\n            key: \"6x6\",\n          },\n          {\n            reportClick: () => reportEvent(() => setSize(8)),\n            text: [\"I've got time for an \", <Bold>8x8</Bold>, \" board.\"],\n            key: \"8x8\",\n          },\n          {\n            reportClick: () => reportEvent(() => setSize(10)),\n            text: [\"The classic - \", <Bold>10x10</Bold>, \".\"],\n            key: \"10x10\",\n          },\n        ],\n      });\n      return;\n    }\n    if (isSinglePlayer === undefined) {\n      // QUESTION 2\n      setButtonChoiceData({\n        title: \"Are you playing by yourself or with a friend?\",\n        options: [\n          {\n            reportClick: () => reportEvent(() => setisSinglePlayer(true)),\n            text: [\"Just me (\", <Bold>1 player</Bold>, \").\"],\n            key: \"1player\",\n          },\n          {\n            reportClick: () => reportEvent(() => setisSinglePlayer(false)),\n            text: [\"Got a friend here (\", <Bold>2 players</Bold>, \").\"],\n            key: \"2player\",\n          },\n        ],\n      });\n      return;\n    }\n  }, [size, isSinglePlayer, reportEvent]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <div className=\"App\">\n        <Warnings />\n        <Header />\n        <VisibilityContext.Provider value={VisibilityValue}>\n          {game && !buttonChoiceData && (\n            <GameArea\n              game={game}\n              computerTurn={isSinglePlayer && game.turn === 1}\n              shipsPlaced={shipsPlaced}\n              placeShip={game.ships[game.turn].length ? placeShip : undefined}\n              placeLastShip={\n                game.ships[game.turn].length === 1\n                  ? () => {\n                      reportEvent(() => proposeChangeTurn());\n                    }\n                  : undefined\n              }\n              changeTurn={\n                isSinglePlayer\n                  ? () => reportEvent(() => changeTurn())\n                  : () => reportEvent(() => proposeChangeTurn())\n              }\n            />\n          )}\n          {buttonChoiceData && <ButtonChoice data={buttonChoiceData} />}\n        </VisibilityContext.Provider>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}